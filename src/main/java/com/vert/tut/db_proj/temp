import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.json.Json;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.jdbcclient.JDBCPool;
import io.vertx.sqlclient.SqlConnection;
import io.vertx.sqlclient.Tuple;

public class UserVerticle extends AbstractVerticle {

    private JDBCPool client;

    @Override
    public void start(Future<Void> startFuture) {
        client = JDBCPool.pool(vertx, "jdbc:mysql://localhost:3306/test_db", "username", "password");

        Router router = Router.router(vertx);

        // POST - Create a new user
        router.post("/user").handler(BodyHandler.create()).handler(ctx -> {
            User user = Json.decodeValue(ctx.getBodyAsString(), User.class);
            client.getConnection().compose(conn -> insertUser(conn, user)).onComplete(ar -> {
                if (ar.succeeded()) {
                    ctx.response().setStatusCode(201).end("User created");
                } else {
                    ctx.response().setStatusCode(500).end(ar.cause().getMessage());
                }
            });
        });

        // GET - Retrieve users
        router.get("/user").handler(ctx -> {
            client.query("SELECT * FROM users").execute(ar -> {
                if (ar.succeeded()) {
                    ctx.response()
                            .putHeader("content-type", "application/json")
                            .end(Json.encodePrettily(ar.result().value()));
                } else {
                    ctx.response().setStatusCode(500).end(ar.cause().getMessage());
                }
            });
        });

        vertx.createHttpServer().requestHandler(router).listen(8080, http -> {
            if (http.succeeded()) {
                startFuture.complete();
            } else {
                startFuture.fail(http.cause());
            }
        });
    }

    private Future<Void> insertUser(SqlConnection conn, User user) {
        return conn.preparedQuery("INSERT INTO users (name, age, country) VALUES (?, ?, ?)")
                .execute(Tuple.of(user.getName(), user.getAge(), user.getCountry()))
                .mapEmpty();
    }

    @Override
    public void stop() throws Exception {
        client.close();
    }
}
